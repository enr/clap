
ext {
    groovyVersion = '2.0.5'
    javaModules = [
        ':modules:core',
        ':modules:uat'
    ]
    uploadableModules = [
        ':modules:core'
    ]
}

allprojects { project ->
    group = 'com.github.enr'
    
    repositories {
        mavenLocal()
        mavenCentral()    
        maven {
            url 'https://oss.sonatype.org/content/repositories/releases/'
        }
    }
}

subprojects {

    if (project.path in javaModules) {
        apply plugin: 'groovy'
        apply plugin: 'maven'

        configurations {
            compile.transitive = true
            testCompile.transitive = true
        }

        dependencies {
            groovy "org.codehaus.groovy:groovy-all:$groovyVersion"
            compile "org.codehaus.groovy:groovy-all:$groovyVersion",
                    'com.google.inject:guice:3.0'
        }

        //archivesBaseName = "clap-${project.name}"

        sourceCompatibility = 1.6
        targetCompatibility = 1.6

        jar {
            manifest {
                attributes( "Implementation-Title": "Clap",
                            "Implementation-Version": version,
                            "Project":project.name)
            }
        }
    }
    
    if (project.path in uploadableModules) {

        ext.pomPath = "${buildDir}/${project.name}-${project.version}.pom"
        
        task writeNewPom << {
            pom {
                project {
                    inceptionYear '2013'
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                }
            }.writeTo(pomPath)
        }
        
        task sourceJar(type: Jar) {
            from sourceSets.main.allSource
            classifier = 'sources'
        }

        task javadocJar(type: Jar, dependsOn: 'javadoc') {
            from javadoc.destinationDir
            classifier = 'javadoc'
        }

        artifacts {
            archives sourceJar, javadocJar, file(pomPath)
        }

        uploadArchives.dependsOn writeNewPom
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.7-20130528220024+0000'
}
